# TermoWeb Function Map

custom_components/termoweb/__init__.py :: _register_diagnostics_platform
    Ensure diagnostics helpers are registered against Home Assistant.
custom_components/termoweb/__init__.py :: _diagnostics_component_loaded
    Return True if Home Assistant reports diagnostics as loaded.
custom_components/termoweb/__init__.py :: _async_register_diagnostics_when_ready
    Wait for diagnostics setup and register TermoWeb helpers.
custom_components/termoweb/__init__.py :: create_rest_client
    Return a REST client configured for the selected brand.
custom_components/termoweb/__init__.py :: async_list_devices
    Call ``list_devices`` logging auth/connection issues consistently.
custom_components/termoweb/__init__.py :: _async_import_energy_history
    Delegate to the energy helper with shared rate limiting and filters.
custom_components/termoweb/__init__.py :: async_setup_entry
    Set up the TermoWeb integration for a config entry.
custom_components/termoweb/__init__.py :: async_setup_entry._async_handle_hass_stop
    Stop background activity gracefully when Home Assistant stops.
custom_components/termoweb/__init__.py :: async_setup_entry._start_ws
    Ensure a websocket client exists and is running for ``dev_id``.
custom_components/termoweb/__init__.py :: async_setup_entry._recalc_poll_interval
    Suspend REST polling when websocket trackers are healthy and fresh.
custom_components/termoweb/__init__.py :: async_setup_entry._on_ws_status
    Recalculate polling intervals when websocket state changes.
custom_components/termoweb/__init__.py :: async_setup_entry._on_coordinator_updated
    Start websocket clients for newly discovered devices.
custom_components/termoweb/__init__.py :: async_register_ws_debug_probe_service
    Register the ws_debug_probe debug helper service.
custom_components/termoweb/__init__.py :: async_register_ws_debug_probe_service._async_ws_debug_probe
    Emit a websocket dev_data probe for debugging.
custom_components/termoweb/__init__.py :: _async_shutdown_entry
    Cancel websocket tasks and listeners for an integration record.
custom_components/termoweb/__init__.py :: async_unload_entry
    Unload a config entry for TermoWeb.
custom_components/termoweb/__init__.py :: async_migrate_entry
    Migrate a config entry; no migrations are needed yet.
custom_components/termoweb/__init__.py :: async_update_entry_options
    Handle options updates; recompute interval if needed.
custom_components/termoweb/api.py :: RESTClient.__init__
    Initialise the REST client with authentication context.
custom_components/termoweb/api.py :: RESTClient.api_base
    Expose API base for auxiliary clients (e.g. WS).
custom_components/termoweb/api.py :: RESTClient._request
    Perform an HTTP request.
custom_components/termoweb/api.py :: RESTClient._ensure_token
    Ensure a bearer token is present; fetch if missing.
custom_components/termoweb/api.py :: RESTClient.user_agent
    Return the configured User-Agent string.
custom_components/termoweb/api.py :: RESTClient.requested_with
    Return the configured X-Requested-With header.
custom_components/termoweb/api.py :: RESTClient.authed_headers
    Return HTTP headers including a valid bearer token.
custom_components/termoweb/api.py :: RESTClient.refresh_token
    Refresh the cached bearer token immediately.
custom_components/termoweb/api.py :: RESTClient.list_devices
    Return normalized device list: [{'dev_id', ...}, ...].
custom_components/termoweb/api.py :: RESTClient.get_nodes
    Return raw nodes payload for a device (shape varies by firmware).
custom_components/termoweb/api.py :: RESTClient.get_node_settings
    Return settings/state for a node.
custom_components/termoweb/api.py :: RESTClient.get_rtc_time
    Return RTC metadata for a device's manager endpoint.
custom_components/termoweb/api.py :: RESTClient._ensure_temperature
    Normalise a numeric temperature to a string with one decimal.
custom_components/termoweb/api.py :: RESTClient._ensure_prog
    Validate and normalise a weekly program list.
custom_components/termoweb/api.py :: RESTClient._ensure_ptemp
    Validate preset temperatures and return formatted strings.
custom_components/termoweb/api.py :: RESTClient._extract_samples
    Normalise heater samples payloads into {"t", "counter"} lists.
custom_components/termoweb/api.py :: RESTClient.set_node_settings
    Update heater settings.
custom_components/termoweb/api.py :: RESTClient._build_acm_extra_options_payload
    Return a validated payload for accumulator extra options.
custom_components/termoweb/api.py :: RESTClient.set_acm_extra_options
    Write default boost settings for an accumulator.
custom_components/termoweb/api.py :: RESTClient.set_acm_boost_state
    Start or stop an accumulator boost session.
custom_components/termoweb/api.py :: RESTClient.get_node_samples
    Return heater samples as list of {"t", "counter"} dicts.
scripts/auto_translate.py :: parse_args
    Return the parsed command-line arguments.
scripts/auto_translate.py :: load_json
    Load JSON content from ``path``.
scripts/auto_translate.py :: dump_json
    Write ``data`` as UTF-8 JSON to ``path``.
scripts/auto_translate.py :: protect_tokens
    Replace placeholders and code spans with sentinel tokens.
scripts/auto_translate.py :: restore_tokens
    Restore placeholder and code span tokens to their originals.
scripts/auto_translate.py :: create_session
    Configure and return a reusable Requests session.
scripts/auto_translate.py :: _translate_once
    Translate ``text`` via the Google web API and return the result.
scripts/auto_translate.py :: translate_text
    Translate ``text`` while preserving placeholder tokens and newlines.
scripts/auto_translate.py :: translate_structure
    Translate every string inside ``data`` recursively.
scripts/auto_translate.py :: main
    Entrypoint for the translation script.
custom_components/termoweb/api.py :: RESTClient._resolve_node_descriptor
    Return ``(node_type, addr)`` for the provided descriptor.
custom_components/termoweb/api.py :: RESTClient._log_non_htr_payload
    Log payloads for unsupported node types at DEBUG level.
custom_components/termoweb/api.py :: RESTClient.normalise_ws_nodes
    Return websocket node payloads unchanged by default.
custom_components/termoweb/backend/__init__.py :: __getattr__
    Lazily import backend implementations to avoid circular imports.
custom_components/termoweb/backend/base.py :: HttpClientProto.list_devices
    Return the list of devices associated with the account.
custom_components/termoweb/backend/base.py :: HttpClientProto.get_nodes
    Return the node description for the given device.
custom_components/termoweb/backend/base.py :: HttpClientProto.get_node_settings
    Return settings for the specified node.
custom_components/termoweb/backend/base.py :: HttpClientProto.set_node_settings
    Update node settings for the specified node.
custom_components/termoweb/backend/base.py :: HttpClientProto.get_node_samples
    Return historical samples for the specified node.
custom_components/termoweb/backend/base.py :: WsClientProto.start
    Start the websocket client.
custom_components/termoweb/backend/base.py :: WsClientProto.stop
    Stop the websocket client.
custom_components/termoweb/backend/base.py :: Backend.__init__
    Initialize backend metadata.
custom_components/termoweb/backend/base.py :: Backend.brand
    Return the configured brand.
custom_components/termoweb/backend/base.py :: Backend.client
    Return the HTTP client associated with this backend.
custom_components/termoweb/backend/base.py :: Backend.create_ws_client
    Create a websocket client for the given device.
custom_components/termoweb/backend/base.py :: Backend.fetch_hourly_samples
    Return normalised hourly samples grouped by node descriptor.
custom_components/termoweb/backend/base.py :: Backend.get_instant_power
    Return the instantaneous power for ``node`` in watts when available.
custom_components/termoweb/backend/base.py :: normalise_sample_records
    Return sorted sample dictionaries containing ``ts`` and ``energy_wh``.
custom_components/termoweb/backend/base.py :: fetch_normalised_hourly_samples
    Return per-node normalised samples for ``nodes`` between ``start`` and ``end``.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRequestError.__init__
    Initialise error metadata for logging and diagnostics.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._post_segmented
    Log segmented POST requests before delegating to ``_request``.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._log_segmented_post
    Emit a debug log for segmented POST calls with sanitized metadata.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient.get_node_settings
    Fetch and normalise node settings for the Ducaheat API.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient.set_node_settings
    Write heater settings using the segmented endpoints.
custom_components/termoweb/backend/ducaheat.py :: DucaheatBackend.fetch_hourly_samples
    Return hourly samples for ``nodes`` using the segmented API.
custom_components/termoweb/backend/ducaheat.py :: DucaheatBackend.get_instant_power
    Return the instantaneous power for ``node`` in watts when available.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient.get_node_samples
    Return heater samples with timestamps normalised to seconds. Non-heater nodes delegate to the base implementation while detecting millisecond payloads automatically.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient.normalise_ws_nodes
    Normalise websocket nodes payloads for Ducaheat specifics.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._normalise_ws_settings
    Normalise half-hourly program data within websocket settings.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._merge_boost_metadata
    Copy boost metadata from ``source`` into ``target`` safely.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._merge_boost_metadata._assign
    Assign a metadata value while respecting preference rules.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._normalise_settings
    Flatten the vendor payload into HA-friendly heater settings.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._normalise_acm_capabilities
    Merge accumulator capability dictionaries into a single mapping.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._normalise_acm_capabilities._merge
    Recursively merge capability dictionaries.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._normalise_prog
    Convert vendor programme payloads into a 168-slot list.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._normalise_prog._coerce_slots
    Convert a day's slots into a 24-value list.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._normalise_prog_temps
    Convert preset temperature payloads into stringified list.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._set_acm_settings
    Apply segmented writes for accumulator nodes.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._collect_boost_metadata
    Capture RTC metadata to derive boost end timing.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._rtc_payload_to_datetime
    Convert an RTC payload into a ``datetime`` instance.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._post_acm_endpoint
    POST to an ACM endpoint, translating client errors.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._select_segmented_node
    Claim or release a segmented node before mutating state.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient.set_acm_extra_options
    Write default boost configuration using segmented endpoints.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient.set_acm_boost_state
    Toggle an accumulator boost session via segmented endpoints.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._format_temp
    Format temperatures using one decimal precision.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._ensure_units
    Validate and normalise temperature units.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._serialise_prog
    Serialise the 168-slot programme back to API structure.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._serialise_prog_temps
    Serialise preset temperatures into the API schema.
custom_components/termoweb/backend/ducaheat.py :: DucaheatRESTClient._safe_temperature
    Defensively format inbound temperature values.
custom_components/termoweb/backend/ducaheat.py :: DucaheatBackend.create_ws_client
    Instantiate the unified websocket client for Ducaheat.
custom_components/termoweb/backend/ducaheat_ws.py :: _rand_t
    Return a pseudo-random token string for polling requests.
custom_components/termoweb/backend/ducaheat_ws.py :: _encode_polling_packet
    Encode Engine.IO polling payloads.
custom_components/termoweb/backend/ducaheat_ws.py :: _decode_polling_packets
    Decode Engine.IO v3 binary polling frames.
custom_components/termoweb/backend/ducaheat_ws.py :: _brand_headers
    Construct brand-specific headers for polling.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._ws_health
    Return the shared websocket health tracker for this client.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._status_should_reset_health
    Return True when a status transition should reset health.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._build_handshake_url
    Return a handshake URL with the provided query parameters.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._record_frame
    Update cached websocket frame statistics and timestamps.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._start_keepalive
    Launch the keepalive loop when the websocket is connected.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._keepalive_loop
    Send Engine.IO ping frames to keep the websocket alive.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._extract_dev_data_payload
    Return the mapping payload embedded in a dev_data Socket.IO event.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._normalise_nodes_payload
    Normalise websocket node payloads via the REST client helper.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._build_nodes_snapshot
    Return a snapshot structure with ``nodes`` and ``nodes_by_type`` buckets.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._ensure_type_bucket
    Return the node bucket for ``node_type`` with default sections.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._apply_heater_addresses
    Update entry and coordinator state with heater address data.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._update_legacy_section
    Store legacy section updates and mirror them in raw state.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._normalise_cadence_value
    Return a positive cadence hint in seconds.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._extract_cadence_candidates
    Return cadence hints discovered in a mapping payload.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._update_payload_window_from_mapping
    Adjust the payload stale window based on cadence hints.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._apply_payload_window_hint
    Update the payload window using cadence metadata.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._reset_payload_window
    Reset the payload stale window to the default.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._dispatch_nodes
    Publish node updates with inventory-aware cache refresh.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._merge_nodes
    Deep merge ``source`` updates into ``target`` in place.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._collect_sample_updates
    Extract heater sample updates from a websocket payload.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._translate_path_update
    Translate ``{"path": ..., "body": ...}`` websocket frames into nodes.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._resolve_update_section
    Map a websocket path segment to the node section bucket.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._forward_sample_updates
    Forward websocket heater sample updates to the energy coordinator.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._subscribe_feeds
    Subscribe to heater status and sample feeds.
custom_components/termoweb/backend/ducaheat_ws.py :: DucaheatWSClient._replay_subscription_paths
    Replay cached subscription paths after a reconnect.
custom_components/termoweb/backend/factory.py :: create_backend
    Create a backend for the given brand.
custom_components/termoweb/backend/sanitize.py :: redact_text
    Return ``value`` with bearer tokens, emails and query tokens removed.
custom_components/termoweb/backend/sanitize.py :: redact_token_fragment
    Return a shortened representation of a token-like string.
custom_components/termoweb/backend/sanitize.py :: mask_identifier
    Return a masked identifier suitable for log output.
custom_components/termoweb/backend/sanitize.py :: validate_boost_minutes
    Return a validated boost duration in minutes or ``None``.
custom_components/termoweb/backend/sanitize.py :: build_acm_boost_payload
    Return a validated accumulator boost payload.
custom_components/termoweb/backend/termoweb.py :: TermoWebBackend._resolve_ws_client_cls
    Return the websocket client class compatible with this backend.
custom_components/termoweb/backend/termoweb.py :: TermoWebBackend.create_ws_client
    Instantiate the unified websocket client for TermoWeb.
custom_components/termoweb/backend/termoweb.py :: TermoWebBackend.fetch_hourly_samples
    Return hourly samples for ``nodes`` using the REST API.
custom_components/termoweb/backend/termoweb.py :: TermoWebBackend.get_instant_power
    Return the instantaneous power for ``node`` in watts when available.
custom_components/termoweb/backend/termoweb_ws.py :: HandshakeError.__init__
    Initialise the error with the HTTP response details.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient.__init__
    Initialise the websocket client container.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._brand_headers
    Return baseline headers aligned with the REST client brand.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._sanitise_headers
    Redact sensitive header values for logging.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._sanitise_placeholder
    Return a placeholder for known sensitive values.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._sanitise_params
    Redact sensitive query parameter values for logging.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._sanitise_url
    Return a redacted representation of the websocket URL.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._wrap_background_task
    Schedule socket.io background tasks on the HA loop.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient.start
    Start the websocket client background task.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient.stop
    Cancel tasks and close websocket sessions.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient.is_running
    Return True if the websocket client task is active.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient.ws_url
    Return the websocket URL using the API client's token helper.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient.debug_probe
    Emit a dev_data probe for debugging purposes.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._runner
    Manage connection attempts with backoff.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._handle_connection_lost
    Record connection loss metadata before the next restart.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._connect_once
    Open the Socket.IO connection.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._wait_for_events
    Wait for the connection to close or stop to be requested.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._disconnect
    Ensure the AsyncClient is disconnected.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._build_engineio_target
    Return the Engine.IO base URL and path.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_connect
    Handle socket connection establishment.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_namespace_connect
    Join the namespace and request the initial snapshot.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._register_debug_catch_all
    Register a catch-all listener to trace websocket traffic when debugging.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._register_debug_catch_all._log_catch_all
    Emit DEBUG logs for all websocket events received.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_disconnect
    Handle socket disconnection.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_reconnect
    Handle socket reconnection attempts.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_connect_error
    Log ``connect_error`` events with their payload.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_error
    Log socket.io ``error`` events with full details.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_reconnect_failed
    Log ``reconnect_failed`` events with the reported context.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_namespace_disconnect
    Log namespace-level disconnect callbacks with their reason.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_dev_handshake
    Handle the ``dev_handshake`` payload.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_dev_data
    Handle the ``dev_data`` payload.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._on_update
    Handle the ``update`` payload.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._idle_monitor
    Monitor idle websocket periods and trigger restarts.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._refresh_subscription
    Re-request device data to keep the websocket session active.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._handle_handshake
    Process the initial handshake payload from the server.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._handle_dev_data
    Handle the first full snapshot of nodes from the websocket.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._handle_update
    Merge incremental node updates from the websocket feed.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._apply_nodes_payload
    Update cached nodes from the websocket payload and notify listeners.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._translate_path_update
    Translate Ducaheat ``{"path": ..., "body": ...}`` frames into nodes.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._resolve_update_section
    Map a websocket path segment onto the node bucket name.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._forward_sample_updates
    Relay websocket heater sample updates to the energy coordinator.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._extract_nodes
    Extract the nodes dictionary from a websocket payload.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._translate_nodes_list
    Convert list-based node payloads into the nested mapping schema.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._collect_update_addresses
    Return a sorted list of ``(node_type, addr)`` pairs in ``nodes``.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._dispatch_nodes
    Publish node updates and return the address map by node type.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._dispatch_nodes._send
    Fire the dispatcher signal with the latest node payload.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._ensure_type_bucket
    Return the node bucket for ``node_type`` with default sections.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._apply_heater_addresses
    Update entry and coordinator state with heater address data.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._heater_sample_subscription_targets
    Return ordered ``(node_type, addr)`` heater sample subscriptions.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._heater_sample_subscription_targets._bind_inventory
    Yield subscription targets sourced from the inventory cache.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._subscribe_heater_samples
    Subscribe to heater and accumulator sample updates.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._mark_event
    Record receipt of a websocket event batch for health tracking.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._schedule_idle_restart
    Log idle payload detection and close the websocket for restart.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._cancel_idle_restart
    Cancel any scheduled idle restart due to new payload activity.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._get_token
    Reuse the REST client token for websocket authentication.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._force_refresh_token
    Force the REST client to fetch a fresh access token.
custom_components/termoweb/backend/termoweb_ws.py :: WebSocketClient._api_base
    Return the base REST API URL used for websocket routes.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient.__init__
    Initialise the legacy websocket client container.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._install_write_hook
    Wrap REST writes so we can observe successful node updates.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient.maybe_restart_after_write
    Restart the websocket if writes follow long periods of inactivity.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient.stop
    Cancel tasks, close websocket sessions and reset legacy state.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._runner
    Manage reconnection attempts and lifecycle.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._run_socketio_09
    Manage reconnection loops for the legacy Socket.IO protocol.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._handshake
    Perform the legacy GET /socket.io/1/ handshake.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._connect_ws
    Open the websocket connection using the handshake session id.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._join_namespace
    Join the API namespace after the websocket connects.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._send_snapshot_request
    Request the initial device snapshot.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._subscribe_session_metadata
    Subscribe to legacy session metadata updates.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._subscribe_htr_samples
    Subscribe to heater sample updates.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._heartbeat_loop
    Send periodic heartbeat frames to keep the connection alive.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._rtc_keepalive_loop
    Poll the REST API to keep the device session alive.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._read_loop
    Consume websocket frames and route events for the legacy protocol.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._handle_event
    Process a Socket.IO 0.9 event payload.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._handle_event._extract_type_addr
    Extract the node type and address from a websocket path.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._handle_event._normalise_addr
    Return a normalised representation of a node address.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._handle_event._record_addr
    Normalise ``value`` and add it to ``touched_addrs``.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._update_legacy_section
    Store legacy section updates and mirror them in raw state.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._legacy_section_for_path
    Return the legacy section identifier for ``path`` if supported.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._log_legacy_update
    Emit debug logging for the legacy websocket update batch.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._refresh_subscription
    Replay subscription calls to keep the legacy websocket active.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._send_text
    Send a websocket text frame.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._disconnect
    Close the websocket connection if active.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._ws_payload_stream
    Yield websocket payload strings.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._record_heartbeat
    Record receipt of a heartbeat frame.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._idle_monitor
    Monitor payload idleness and restart stale websocket sessions.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._run_heartbeat
    Send periodic heartbeats until cancelled.
custom_components/termoweb/backend/termoweb_ws.py :: TermoWebWSClient._socket_base
    Return the base URL for websocket connections.
custom_components/termoweb/backend/ws_client.py :: resolve_ws_update_section
    Map a websocket path segment onto the node section bucket.
custom_components/termoweb/backend/ws_client.py :: forward_ws_sample_updates
    Relay websocket heater sample updates to the energy coordinator.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._status_should_reset_health
    Return True when a status should clear healthy tracking.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._ws_state_bucket
    Return the websocket state bucket for the current device.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._ws_health_tracker
    Return the :class:`WsHealthTracker` for this websocket client.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._notify_ws_status
    Dispatch websocket status updates with tracker metadata.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._mark_ws_payload
    Update tracker payload timestamps and emit changes if required.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._mark_ws_heartbeat
    Record a websocket heartbeat and emit staleness changes.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._refresh_ws_payload_state
    Re-evaluate payload staleness and emit notifications if it changed.
custom_components/termoweb/backend/ws_client.py :: _WSStatusMixin._update_status
    Publish websocket status updates to Home Assistant listeners.
custom_components/termoweb/backend/ws_client.py :: _prepare_nodes_dispatch
    Normalise node payload data for downstream websocket dispatch.
custom_components/termoweb/backend/ws_client.py :: _WSCommon._process_power_updates
    Extract instantaneous power readings from websocket payloads.
custom_components/termoweb/backend/ws_client.py :: _WSCommon.__init__
    Initialise shared websocket state.
custom_components/termoweb/backend/ws_client.py :: __getattr__
    Lazily expose backend websocket client implementations.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.update_status
    Update the tracked status and return (status_changed, health_changed).
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.set_payload_window
    Set the payload freshness window and return True if staleness changed.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.mark_payload
    Record an application payload and return True if staleness changed.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.mark_heartbeat
    Record a transport heartbeat and return True if staleness changed.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.refresh_payload_state
    Recalculate payload staleness and return True if it changed.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.is_payload_stale
    Return True when the last payload timestamp exceeds ``payload_stale_after``.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.payload_stale
    Return the cached payload staleness state.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.healthy_minutes
    Return the number of minutes spent in the healthy state.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.stale_deadline
    Return the monotonic timestamp when the payload becomes stale.
custom_components/termoweb/backend/ws_health.py :: WsHealthTracker.snapshot
    Return a serializable snapshot of the tracker state.
custom_components/termoweb/binary_sensor.py :: async_setup_entry
    Set up one connectivity binary sensor per TermoWeb hub (dev_id).
custom_components/termoweb/binary_sensor.py :: GatewayOnlineBinarySensor.__init__
    Initialise the connectivity binary sensor.
custom_components/termoweb/binary_sensor.py :: GatewayOnlineBinarySensor.gateway_signal
    Return the dispatcher signal for gateway websocket status.
custom_components/termoweb/binary_sensor.py :: GatewayOnlineBinarySensor._ws_state
    Return the latest websocket status payload for this device.
custom_components/termoweb/binary_sensor.py :: GatewayOnlineBinarySensor.is_on
    Return True when the integration reports the gateway is online.
custom_components/termoweb/binary_sensor.py :: GatewayOnlineBinarySensor.device_info
    Return Home Assistant device metadata for the gateway.
custom_components/termoweb/binary_sensor.py :: GatewayOnlineBinarySensor.extra_state_attributes
    Return additional gateway diagnostics and websocket state.
custom_components/termoweb/binary_sensor.py :: GatewayOnlineBinarySensor._handle_gateway_dispatcher
    Handle websocket status broadcasts from the integration.
custom_components/termoweb/binary_sensor.py :: HeaterBoostActiveBinarySensor.__init__
    Initialise the boost activity binary sensor.
custom_components/termoweb/binary_sensor.py :: HeaterBoostActiveBinarySensor.is_on
    Return True when the heater boost is active.
custom_components/termoweb/binary_sensor.py :: HeaterBoostActiveBinarySensor.extra_state_attributes
    Return boost metadata exposed alongside the binary state.
custom_components/termoweb/boost.py :: coerce_int
    Return ``value`` as ``int`` when possible, else ``None``.
custom_components/termoweb/boost.py :: coerce_boost_bool
    Return ``value`` as a boolean when possible.
custom_components/termoweb/boost.py :: coerce_boost_minutes
    Return ``value`` as positive minutes when possible.
custom_components/termoweb/boost.py :: _coerce_positive_minutes
    Return ``value`` as a positive integer minute count when possible.
custom_components/termoweb/boost.py :: supports_boost
    Return ``True`` when ``node`` exposes boost controls.
custom_components/termoweb/boost.py :: resolve_boost_end_from_fields
    Translate boost end ``day``/``minute`` fields into a timestamp.
custom_components/termoweb/button.py :: async_setup_entry
    Expose hub refresh and accumulator boost helper buttons.
custom_components/termoweb/button.py :: async_setup_entry.default_name
    Return a placeholder name for heater nodes.
custom_components/termoweb/button.py :: StateRefreshButton.__init__
    Initialise the force-refresh button entity.
custom_components/termoweb/button.py :: StateRefreshButton.device_info
    Return the Home Assistant device metadata for this gateway.
custom_components/termoweb/button.py :: StateRefreshButton.async_press
    Request an immediate coordinator refresh when pressed.
custom_components/termoweb/button.py :: AccumulatorBoostButtonBase.__init__
    Initialise an accumulator boost helper button.
custom_components/termoweb/button.py :: AccumulatorBoostButtonBase._service_minutes
    Return the minutes payload passed to the helper service.
custom_components/termoweb/button.py :: AccumulatorBoostButtonBase.async_press
    Invoke the helper service to update the accumulator boost state.
custom_components/termoweb/button.py :: AccumulatorBoostButton.__init__
    Initialise the boost helper button that uses stored presets.
custom_components/termoweb/button.py :: AccumulatorBoostButton.async_press
    Trigger a boost using the persisted duration and temperature.
custom_components/termoweb/button.py :: _create_boost_button_entities
    Return boost helper buttons described by shared metadata.
custom_components/termoweb/button.py :: _build_boost_button
    Instantiate a boost helper button for ``metadata``.
custom_components/termoweb/climate.py :: async_setup_entry
    Discover heater nodes and create climate entities.
custom_components/termoweb/climate.py :: async_setup_entry._svc_set_schedule
    Handle the set_schedule entity service.
custom_components/termoweb/climate.py :: async_setup_entry._svc_set_preset_temperatures
    Handle the set_preset_temperatures entity service.
custom_components/termoweb/climate.py :: async_setup_entry._svc_set_acm_preset
    Handle accumulator preset updates.
custom_components/termoweb/climate.py :: async_setup_entry._svc_start_boost
    Handle accumulator boost start service.
custom_components/termoweb/climate.py :: async_setup_entry._svc_cancel_boost
    Handle accumulator boost cancellation service.
custom_components/termoweb/climate.py :: HeaterClimateEntity.__init__
    Initialise the climate entity for a TermoWeb heater.
custom_components/termoweb/climate.py :: HeaterClimateEntity.async_will_remove_from_hass
    Clean up pending tasks when the entity is removed.
custom_components/termoweb/climate.py :: HeaterClimateEntity._slot_label
    Translate a program slot integer into a label.
custom_components/termoweb/climate.py :: HeaterClimateEntity._current_prog_slot
    Return the active program slot index for the heater.
custom_components/termoweb/climate.py :: HeaterClimateEntity._settings_maps
    Return all cached settings maps referencing this node.
custom_components/termoweb/climate.py :: HeaterClimateEntity._optimistic_update
    Apply ``mutator`` to cached settings and refresh state if changed.
custom_components/termoweb/climate.py :: HeaterClimateEntity._async_write_settings
    Submit a settings update to the TermoWeb API.
custom_components/termoweb/climate.py :: HeaterClimateEntity._async_client_call
    Call a backend helper while applying standard error handling.
custom_components/termoweb/climate.py :: HeaterClimateEntity._async_submit_settings
    Send settings via the heater-specific API.
custom_components/termoweb/climate.py :: HeaterClimateEntity._handle_ws_event
    React to websocket updates for this heater.
custom_components/termoweb/climate.py :: HeaterClimateEntity._payload_mentions_heater
    Return True when a websocket payload references this heater.
custom_components/termoweb/climate.py :: HeaterClimateEntity._inventory_for_payload
    Return the resolved inventory for ``payload``.
custom_components/termoweb/climate.py :: HeaterClimateEntity._inventory_mentions_addr
    Return True when ``inventory`` references this heater address.
custom_components/termoweb/climate.py :: HeaterClimateEntity.hvac_mode
    Return the HA HVAC mode derived from heater settings.
custom_components/termoweb/climate.py :: HeaterClimateEntity.hvac_action
    Return the current HVAC action reported by the heater.
custom_components/termoweb/climate.py :: HeaterClimateEntity.current_temperature
    Return the measured ambient temperature.
custom_components/termoweb/climate.py :: HeaterClimateEntity.target_temperature
    Return the target temperature set on the heater.
custom_components/termoweb/climate.py :: HeaterClimateEntity.min_temp
    Return the minimum supported setpoint.
custom_components/termoweb/climate.py :: HeaterClimateEntity.max_temp
    Return the maximum supported setpoint.
custom_components/termoweb/climate.py :: HeaterClimateEntity.icon
    Return an icon reflecting the heater state.
custom_components/termoweb/climate.py :: HeaterClimateEntity.extra_state_attributes
    Return additional metadata about the heater.
custom_components/termoweb/climate.py :: HeaterClimateEntity._commit_write
    Submit a heater write, update cached state, and schedule fallback.
custom_components/termoweb/climate.py :: HeaterClimateEntity.async_set_schedule
    Write the 7x24 tri-state program to the device.
custom_components/termoweb/climate.py :: HeaterClimateEntity.async_set_preset_temperatures
    Write the cold/night/day preset temperatures.
custom_components/termoweb/climate.py :: HeaterClimateEntity.async_set_temperature
    Set target temperature; server requires manual+stemp together (stemp string handled by API).
custom_components/termoweb/climate.py :: HeaterClimateEntity._default_mode_for_setpoint
    Return the mode enforced when sending a bare setpoint.
custom_components/termoweb/climate.py :: HeaterClimateEntity._requires_setpoint_with_mode
    Return whether the backend needs a target temperature for the mode.
custom_components/termoweb/climate.py :: HeaterClimateEntity._allows_setpoint_in_mode
    Return whether a mode already supports standalone setpoint writes.
custom_components/termoweb/climate.py :: HeaterClimateEntity._hvac_mode_to_backend
    Translate an HA HVAC mode to the backend string representation.
custom_components/termoweb/climate.py :: HeaterClimateEntity.async_set_hvac_mode
    Post off/auto/manual.
custom_components/termoweb/climate.py :: HeaterClimateEntity._ensure_write_task
    Schedule a debounced write task if one is not running.
custom_components/termoweb/climate.py :: HeaterClimateEntity._write_after_debounce
    Batch pending mode/setpoint writes after the debounce interval.
custom_components/termoweb/climate.py :: HeaterClimateEntity._schedule_refresh_fallback
    Schedule a refresh if the websocket echo does not arrive.
custom_components/termoweb/climate.py :: HeaterClimateEntity._schedule_refresh_fallback._fallback
    Force a heater refresh after the fallback delay.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.__init__
    Initialise the accumulator climate entity.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity._default_mode_for_setpoint
    Accumulators keep their current mode when updating setpoints.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity._requires_setpoint_with_mode
    Boost does not rely on manual setpoint semantics.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity._allows_setpoint_in_mode
    Accumulators accept setpoints without forcing a manual mode.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity._preferred_boost_minutes
    Return the configured boost duration in minutes.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.hvac_mode
    Return the current accumulator HVAC mode.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.async_set_hvac_mode
    Handle accumulator HVAC modes, delegating boost to presets.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.preset_mode
    Return the active preset mode.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.async_set_preset_mode
    Set the accumulator preset mode.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.extra_state_attributes
    Return accumulator attributes including boost metadata.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity._validate_boost_minutes
    Return a validated boost duration or ``None`` when absent.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.async_set_acm_preset
    Update the default boost duration and/or temperature.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.async_start_boost
    Start an accumulator boost session.
custom_components/termoweb/climate.py :: AccumulatorClimateEntity.async_cancel_boost
    Cancel the active accumulator boost session.
custom_components/termoweb/config_flow.py :: _get_version
    Read integration version from manifest (DRY).
custom_components/termoweb/config_flow.py :: _login_schema
    Build the login form schema with provided defaults.
custom_components/termoweb/config_flow.py :: _validate_login
    Ensure the provided credentials authenticate successfully.
custom_components/termoweb/config_flow.py :: TermoWebConfigFlow._handle_login_workflow
    Handle shared login form validation and error handling.
custom_components/termoweb/config_flow.py :: TermoWebConfigFlow.async_step_user
    Collect credentials and create the config entry.
custom_components/termoweb/config_flow.py :: TermoWebConfigFlow.async_step_reconfigure
    Reconfigure username/password (no use_push).
custom_components/termoweb/config_flow.py :: TermoWebOptionsFlow.__init__
    Store the entry being configured.
custom_components/termoweb/config_flow.py :: TermoWebOptionsFlow.async_step_init
    Show or process the debug options form.
custom_components/termoweb/config_flow.py :: async_get_options_flow
    Return the options flow handler for this config entry.
custom_components/termoweb/const.py :: get_brand_api_base
    Return API base URL for the selected brand.
custom_components/termoweb/const.py :: get_brand_basic_auth
    Return Base64-encoded client credentials for the brand.
custom_components/termoweb/const.py :: get_brand_label
    Return human-readable brand label.
custom_components/termoweb/const.py :: get_brand_user_agent
    Return the preferred User-Agent string for the brand.
custom_components/termoweb/const.py :: get_brand_requested_with
    Return the X-Requested-With header value for the brand.
custom_components/termoweb/const.py :: get_brand_socketio_path
    Return the Socket.IO path for the selected brand.
custom_components/termoweb/const.py :: signal_ws_data
    Signal name for WS ‘data’ frames dispatched to platforms.
custom_components/termoweb/const.py :: signal_ws_status
    Signal name for WS status/health updates.
custom_components/termoweb/coordinator.py :: RaiseUpdateFailedCoordinator.async_refresh
    Refresh data and raise ``UpdateFailed`` when polling fails.
custom_components/termoweb/coordinator.py :: _device_display_name
    Return the trimmed device name or a fallback for ``dev_id``.
custom_components/termoweb/coordinator.py :: _ensure_heater_section
    Ensure ``nodes_by_type`` contains an ``htr`` section and return it.
custom_components/termoweb/coordinator.py :: _normalize_energy_payload
    Return canonical energy node address mapping and aliases for ``payload``.
custom_components/termoweb/coordinator.py :: StateCoordinator.__init__
    Initialize the TermoWeb device coordinator.
custom_components/termoweb/coordinator.py :: StateCoordinator._collect_previous_settings
    Return normalised settings carried over from previous poll.
custom_components/termoweb/coordinator.py :: StateCoordinator._instant_power_key
    Return a normalized key for instant power tracking.
custom_components/termoweb/coordinator.py :: StateCoordinator._instant_power_snapshot
    Return the current instant power cache grouped by node type.
custom_components/termoweb/coordinator.py :: StateCoordinator._sync_instant_power_data
    Publish the latest instant power snapshot to listeners.
custom_components/termoweb/coordinator.py :: StateCoordinator._record_instant_power
    Store an instant power reading and return ``True`` when changed.
custom_components/termoweb/coordinator.py :: StateCoordinator._ingest_instant_power_payload
    Extract and record power metadata from a payload.
custom_components/termoweb/coordinator.py :: StateCoordinator._should_skip_rest_power
    Return ``True`` when websocket data is fresh enough to skip REST power.
custom_components/termoweb/coordinator.py :: StateCoordinator._async_fetch_settings_by_address
    Fetch settings for every address and update ``settings_by_type``.
custom_components/termoweb/coordinator.py :: StateCoordinator._clone_inventory
    Return a fresh ``Inventory`` instance for cached payloads.
custom_components/termoweb/coordinator.py :: StateCoordinator._normalise_settings_map
    Return a copy of ``settings_by_type`` keyed by normalised addresses.
custom_components/termoweb/coordinator.py :: StateCoordinator._assemble_device_record
    Return a coordinator cache record for ``inventory`` and settings.
custom_components/termoweb/coordinator.py :: StateCoordinator._normalize_mode_value
    Return a canonical string for backend HVAC modes.
custom_components/termoweb/coordinator.py :: StateCoordinator._pending_key
    Return the normalised pending settings key for a node.
custom_components/termoweb/coordinator.py :: StateCoordinator._prune_pending_settings
    Drop expired pending settings entries.
custom_components/termoweb/coordinator.py :: StateCoordinator.register_pending_setting
    Record expected heater settings awaiting confirmation.
custom_components/termoweb/coordinator.py :: StateCoordinator.resolve_boost_end
    Return boost end metadata derived from cached day/minute fields.
custom_components/termoweb/coordinator.py :: StateCoordinator._rtc_payload_to_datetime
    Return a timezone-aware datetime extracted from RTC payload.
custom_components/termoweb/coordinator.py :: StateCoordinator._device_now_estimate
    Return the latest hub time reference adjusted by monotonic delta.
custom_components/termoweb/coordinator.py :: StateCoordinator._async_fetch_rtc_datetime
    Fetch the hub RTC time and update the cached reference.
custom_components/termoweb/coordinator.py :: StateCoordinator._requires_boost_resolution
    Return True when ``payload`` exposes boost day/min metadata.
custom_components/termoweb/coordinator.py :: StateCoordinator._apply_accumulator_boost_metadata
    Store derived boost metadata on ``payload``.
custom_components/termoweb/coordinator.py :: StateCoordinator._apply_boost_metadata_for_settings
    Apply boost metadata derivation to every settings payload.
custom_components/termoweb/coordinator.py :: StateCoordinator.handle_instant_power_update
    Process a websocket instant power update.
custom_components/termoweb/coordinator.py :: StateCoordinator.instant_power_entry
    Return the cached instant power entry for ``(node_type, addr)``.
custom_components/termoweb/coordinator.py :: StateCoordinator.instant_power_overview
    Return a diagnostics-friendly snapshot of instant power values.
custom_components/termoweb/coordinator.py :: StateCoordinator._should_defer_pending_setting
    Return True when a pending write should defer payload merging.
custom_components/termoweb/coordinator.py :: StateCoordinator._merge_nodes_by_type
    Merge cached addresses, existing sections and payload settings.
custom_components/termoweb/coordinator.py :: StateCoordinator._normalise_type_section
    Return a standard mapping for a node type section.
custom_components/termoweb/coordinator.py :: StateCoordinator.update_nodes
    Update cached node payload and inventory.
custom_components/termoweb/coordinator.py :: StateCoordinator._ensure_inventory
    Ensure cached inventory metadata is available.
custom_components/termoweb/coordinator.py :: StateCoordinator.async_refresh_heater
    Refresh settings for a specific node and push the update to listeners.
custom_components/termoweb/coordinator.py :: StateCoordinator._async_update_data
    Fetch the latest settings for every known node on each poll.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator.__init__
    Initialize the heater energy coordinator.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator.update_addresses
    Replace the tracked nodes using immutable inventory metadata.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._iter_energy_targets
    Yield normalised energy node targets from ``inventory``.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._targets_by_type
    Return energy node addresses grouped by canonical type.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._prefill_energy_buckets
    Seed energy and power buckets from cached coordinator state.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._poll_recent_samples
    Fetch recent energy samples for every tracked node.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._process_energy_sample
    Update cached energy and derived power for ``addr``.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._async_update_data
    Fetch recent heater energy samples and derive totals and power.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._should_skip_poll
    Return True when websocket pushes keep energy data fresh.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._ws_margin_seconds
    Return the buffer to wait after the websocket lease expires.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator._extract_sample_point
    Extract ``(timestamp, counter)`` from websocket sample payloads.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator.handle_ws_samples
    Update cached heater metrics from websocket ``samples`` payloads.
custom_components/termoweb/coordinator.py :: EnergyStateCoordinator.merge_samples_for_window
    Merge normalised hourly samples into the cached energy state.
custom_components/termoweb/hourly_poller.py :: HourlySamplesPoller.__init__
    Initialise the poller with Home Assistant context and dependencies.
custom_components/termoweb/hourly_poller.py :: HourlySamplesPoller.async_setup
    Register the HH:05 local trigger and perform optional catch-up.
custom_components/termoweb/hourly_poller.py :: HourlySamplesPoller.async_shutdown
    Cancel scheduled triggers and pending polling tasks.
custom_components/termoweb/hourly_poller.py :: HourlySamplesPoller._on_time
    Callback invoked by Home Assistant's time tracker in a thread-safe way.
custom_components/termoweb/hourly_poller.py :: HourlySamplesPoller._run_for_previous_hour
    Fetch and merge samples for the hour preceding ``now_local``.
custom_components/termoweb/hourly_poller.py :: HourlySamplesPoller._poll_device
    Fetch samples for ``dev_id`` and merge them into the coordinator.
custom_components/termoweb/coordinator.py :: _wrap_logger
    Return a logger proxy that exposes ``isEnabledFor`` when missing.
custom_components/termoweb/diagnostics.py :: async_get_config_entry_diagnostics
    Return a diagnostics payload for ``entry``.
custom_components/termoweb/energy.py :: _resolve_recorder_imports
    Return cached recorder helper imports.
custom_components/termoweb/energy.py :: _resolve_statistics_helpers
    Return the recorder statistics helpers for compatibility shims.
custom_components/termoweb/energy.py :: _normalize_heater_sources
    Return canonical heater node address map for ``addrs``.
custom_components/termoweb/energy.py :: _iso_date
    Convert unix timestamp to ISO date.
custom_components/termoweb/energy.py :: _store_statistics
    Insert entity statistics using the recorder import helper.
custom_components/termoweb/energy.py :: _statistics_row_get
    Read a field from a statistics row regardless of its container type.
custom_components/termoweb/energy.py :: _statistics_during_period_compat
    Fetch statistics for a period using the best available API.
custom_components/termoweb/energy.py :: _get_last_statistics_compat
    Retrieve the last statistics row via synchronous or async helpers.
custom_components/termoweb/energy.py :: _clear_statistics_compat
    Clear statistics using whichever helper is available.
custom_components/termoweb/energy.py :: _collect_statistics
    Return statistics rows for a single statistic id.
custom_components/termoweb/energy.py :: _enforce_monotonic_sum
    Clamp entity statistics so sums never decrease near import seams.
custom_components/termoweb/energy.py :: async_import_energy_history
    Fetch historical hourly samples and insert statistics with filters.
custom_components/termoweb/energy.py :: async_register_import_energy_history_service
    Register the import_energy_history service if it is missing.
custom_components/termoweb/energy.py :: async_register_import_energy_history_service._service_import_energy_history
    Handle the import_energy_history service call.
custom_components/termoweb/entity.py :: GatewaySignalHandler.__call__
    Invoke the callback with a dispatcher payload.
custom_components/termoweb/entity.py :: GatewayDispatcherEntity.__init__
    Initialise the dispatcher helper and base classes.
custom_components/termoweb/entity.py :: GatewayDispatcherEntity.gateway_signal
    Return the dispatcher signal name for this entity.
custom_components/termoweb/entity.py :: GatewayDispatcherEntity.gateway_signal_handler
    Return the callback invoked for dispatcher updates.
custom_components/termoweb/entity.py :: GatewayDispatcherEntity.async_added_to_hass
    Subscribe to dispatcher updates when the entity is added.
custom_components/termoweb/entity.py :: GatewayDispatcherEntity.async_will_remove_from_hass
    Unsubscribe from dispatcher updates before removal.
custom_components/termoweb/entity.py :: GatewayDispatcherEntity._handle_gateway_dispatcher
    Handle dispatcher payloads targeting the entity.
custom_components/termoweb/fallback_translations.py :: language_candidates
    Return ordered fallback language candidates for ``language``.
custom_components/termoweb/fallback_translations.py :: get_fallback_translations
    Return fallback translation strings for ``language``.
custom_components/termoweb/heater.py :: _build_boost_button_metadata
    Return the configured metadata describing boost helper buttons.
custom_components/termoweb/heater.py :: HeaterPlatformDetails.__iter__
    Provide tuple-style iteration compatibility.
custom_components/termoweb/heater.py :: HeaterPlatformDetails.nodes_by_type
    Return nodes grouped by type from the immutable inventory.
custom_components/termoweb/heater.py :: HeaterPlatformDetails.addrs_by_type
    Return heater addresses grouped by node type.
custom_components/termoweb/heater.py :: HeaterPlatformDetails.addresses_for
    Return immutable heater addresses for ``node_type``.
custom_components/termoweb/heater.py :: _boost_runtime_store
    Return the mutable boost runtime store for ``entry_data``.
custom_components/termoweb/heater.py :: get_boost_runtime_minutes
    Return the stored boost runtime for the specified node.
custom_components/termoweb/heater.py :: set_boost_runtime_minutes
    Persist ``minutes`` as the preferred boost runtime for ``node``.
custom_components/termoweb/heater.py :: resolve_boost_runtime_minutes
    Return the preferred boost runtime or ``default`` when unset.
custom_components/termoweb/heater.py :: iter_boost_button_metadata
    Yield the metadata describing boost helper buttons.
custom_components/termoweb/heater.py :: iter_boostable_heater_nodes
    Yield heater nodes that expose boost functionality.
custom_components/termoweb/heater.py :: derive_boost_state
    Return derived boost metadata for ``settings`` using ``coordinator``.
custom_components/termoweb/heater.py :: DispatcherSubscriptionHelper.__init__
    Initialise the helper for the provided entity.
custom_components/termoweb/heater.py :: DispatcherSubscriptionHelper.subscribe
    Subscribe to a dispatcher signal and register clean-up.
custom_components/termoweb/heater.py :: DispatcherSubscriptionHelper.unsubscribe
    Remove the dispatcher subscription if it exists.
custom_components/termoweb/heater.py :: DispatcherSubscriptionHelper.is_connected
    Return True when the dispatcher listener is active.
custom_components/termoweb/heater.py :: _iter_nodes
    Yield :class:`Node` instances from ``nodes`` when possible.
custom_components/termoweb/heater.py :: iter_heater_nodes
    Yield heater node metadata for supported node types.
custom_components/termoweb/heater.py :: iter_heater_maps
    Yield unique heater map dictionaries for ``map_key``.
custom_components/termoweb/heater.py :: log_skipped_nodes
    Log skipped TermoWeb nodes for a given platform.
custom_components/termoweb/heater.py :: build_heater_name_map
    Return a mapping of heater node identifiers to friendly names.
ustom_components/termoweb/heater.py :: _extract_inventory
    Return the shared inventory stored alongside a config entry.
custom_components/termoweb/heater.py :: resolve_entry_inventory
    Return the shared inventory stored alongside a config entry.
custom_components/termoweb/heater.py :: heater_platform_details_for_entry
    Return heater platform metadata derived from ``entry_data``.
custom_components/termoweb/heater.py :: prepare_heater_platform_data
    Return node metadata and name resolution helpers for a config entry.
custom_components/termoweb/heater.py :: HeaterNodeBase.__init__
    Initialise a heater entity tied to a TermoWeb device.
custom_components/termoweb/heater.py :: HeaterNodeBase.async_added_to_hass
    Subscribe to websocket updates once the entity is added to hass.
custom_components/termoweb/heater.py :: HeaterNodeBase.async_will_remove_from_hass
    Tidy up websocket listeners before the entity is removed.
custom_components/termoweb/heater.py :: HeaterNodeBase._handle_ws_message
    Process websocket payloads addressed to this heater.
custom_components/termoweb/heater.py :: HeaterNodeBase._payload_matches_heater
    Return True when the websocket payload targets this heater.
custom_components/termoweb/heater.py :: HeaterNodeBase._handle_ws_event
    Schedule a state refresh after a websocket update.
custom_components/termoweb/heater.py :: HeaterNodeBase.should_poll
    Home Assistant should not poll heater entities.
custom_components/termoweb/heater.py :: HeaterNodeBase.available
    Return whether the backing device exposes heater data.
custom_components/termoweb/heater.py :: HeaterNodeBase._device_available
    Return True when ``device_entry`` provides heater metadata for this node.
custom_components/termoweb/heater.py :: HeaterNodeBase._device_record
    Return the coordinator cache entry for this device.
custom_components/termoweb/heater.py :: HeaterNodeBase._heater_section
    Return the heater-specific metadata cached for this entity.
custom_components/termoweb/heater.py :: HeaterNodeBase.heater_settings
    Return the cached settings for this heater, if available.
custom_components/termoweb/heater.py :: HeaterNodeBase._normalise_addresses
    Return a list of normalised addresses from ``addresses``.
custom_components/termoweb/heater.py :: HeaterNodeBase._extract_device_addresses
    Return all known addresses for ``node_type`` from ``device_entry``.
custom_components/termoweb/heater.py :: HeaterNodeBase._hass_for_runtime
    Return the best-effort Home Assistant instance for runtime access.
custom_components/termoweb/heater.py :: HeaterNodeBase.hass
    Return the Home Assistant instance, falling back to the coordinator.
custom_components/termoweb/heater.py :: HeaterNodeBase.hass
    Store the Home Assistant reference for runtime access.
custom_components/termoweb/heater.py :: HeaterNodeBase.boost_state
    Return derived boost metadata for this heater.
custom_components/termoweb/heater.py :: HeaterNodeBase._client
    Return the REST client used for write operations.
custom_components/termoweb/heater.py :: HeaterNodeBase._units
    Return the configured temperature units for this heater.
custom_components/termoweb/heater.py :: HeaterNodeBase.device_info
    Expose Home Assistant device metadata for the heater.
custom_components/termoweb/i18n.py :: async_get_translations
    Return an empty translation mapping when helpers are unavailable.
custom_components/termoweb/i18n.py :: _tr
    Return the translated string for ``key`` with ``placeholders``.
custom_components/termoweb/i18n.py :: async_get_fallback_translations
    Return cached fallback translation templates for the current language.
custom_components/termoweb/i18n.py :: format_fallback
    Return the formatted fallback string for ``key``.
custom_components/termoweb/i18n.py :: attach_fallbacks
    Attach fallback translations to ``target`` when supported.
custom_components/termoweb/identifiers.py :: build_heater_unique_id
    Return the canonical unique ID for a heater node.
custom_components/termoweb/identifiers.py :: build_heater_entity_unique_id
    Return the canonical unique ID for a heater entity.
custom_components/termoweb/identifiers.py :: build_heater_energy_unique_id
    Return the canonical unique ID for a heater energy sensor.
custom_components/termoweb/identifiers.py :: build_power_monitor_unique_id
    Return the canonical unique ID for a power monitor node or entity.
custom_components/termoweb/identifiers.py :: build_power_monitor_energy_unique_id
    Return the canonical unique ID for a power monitor energy sensor.
custom_components/termoweb/identifiers.py :: build_power_monitor_instant_power_unique_id
    Return the canonical unique ID for a power monitor instant power sensor.
custom_components/termoweb/identifiers.py :: build_power_monitor_power_unique_id
    Return the canonical unique ID for a power monitor power sensor.
custom_components/termoweb/inventory.py :: _default_heater_name
    Return the default fallback name for a heater address.
custom_components/termoweb/inventory.py :: Inventory.__init__
    Initialize the inventory container.
custom_components/termoweb/inventory.py :: Inventory.dev_id
    Get the device identifier.
custom_components/termoweb/inventory.py :: Inventory.payload
    Get the raw node payload.
custom_components/termoweb/inventory.py :: Inventory.nodes
    Get the immutable tuple of node objects.
custom_components/termoweb/inventory.py :: Inventory._ensure_addresses_by_type_cache
    Return cached node addresses grouped by normalised type.
custom_components/termoweb/inventory.py :: Inventory.addresses_by_type
    Return mapping of node type to normalised addresses.
custom_components/termoweb/inventory.py :: Inventory._ensure_nodes_by_type_cache
    Return cached node groupings keyed by normalised type.
custom_components/termoweb/inventory.py :: Inventory.nodes_by_type
    Return mapping of node type to node instances.
custom_components/termoweb/inventory.py :: Inventory.heater_nodes
    Return tuple of nodes belonging to heater-compatible types.
custom_components/termoweb/inventory.py :: Inventory.explicit_heater_names
    Return node type/address pairs that have explicit user-defined names.
custom_components/termoweb/inventory.py :: Inventory.heater_address_map
    Return forward and reverse heater address mappings.
custom_components/termoweb/inventory.py :: Inventory.power_monitor_address_map
    Return forward and reverse power monitor address mappings.
custom_components/termoweb/inventory.py :: Inventory._ensure_sample_addresses
    Return cached normalised sample addresses for the provided inputs.
custom_components/termoweb/inventory.py :: Inventory._ensure_heater_sample_addresses
    Return cached normalised heater address data for samples.
custom_components/termoweb/inventory.py :: Inventory._ensure_power_monitor_sample_addresses
    Return cached normalised power monitor address data for samples.
custom_components/termoweb/inventory.py :: Inventory.heater_sample_address_map
    Return normalised heater addresses and compatibility aliases.
custom_components/termoweb/inventory.py :: Inventory.heater_sample_targets
    Return ordered ``(node_type, addr)`` sample subscription targets.
custom_components/termoweb/inventory.py :: Inventory.power_monitor_sample_address_map
    Return normalised power monitor addresses and compatibility aliases.
custom_components/termoweb/inventory.py :: Inventory.power_monitor_sample_targets
    Return ordered power monitor sample subscription targets.
custom_components/termoweb/inventory.py :: Inventory._validate_sample_targets
    Return deduplicated and sanitised sample target pairs.
custom_components/termoweb/inventory.py :: Inventory.heater_name_map
    Return cached heater name mapping for ``default_factory``.
custom_components/termoweb/inventory.py :: _normalize_node_iterable
    Return filtered node tuples and raw length for ``nodes``.
custom_components/termoweb/inventory.py :: resolve_record_inventory
    Return the ``Inventory`` for ``record`` and describe its origin.
custom_components/termoweb/inventory.py :: _normalize_node_identifier
    Return ``value`` as a normalised node identifier string.
custom_components/termoweb/inventory.py :: normalize_node_type
    Return ``value`` as a normalised node type string.
custom_components/termoweb/inventory.py :: normalize_node_addr
    Return ``value`` as a normalised node address string.
custom_components/termoweb/inventory.py :: addresses_by_node_type
    Return mapping of node type to address list, tracking unknown types.
custom_components/termoweb/inventory.py :: build_heater_address_map
    Return mapping of heater node types to addresses and reverse lookup.
custom_components/termoweb/inventory.py :: build_heater_inventory_details
    Return derived heater metadata for ``nodes``.
custom_components/termoweb/inventory.py :: heater_platform_details_from_inventory
    Return heater platform metadata derived from ``inventory``.
custom_components/termoweb/inventory.py :: heater_platform_details_from_inventory.resolve_name
    Resolve friendly names for heater nodes.
custom_components/termoweb/inventory.py :: normalize_heater_addresses
    Return canonical heater addresses and compatibility aliases.
custom_components/termoweb/inventory.py :: normalize_power_monitor_addresses
    Return canonical power monitor addresses and compatibility aliases.
custom_components/termoweb/inventory.py :: heater_sample_subscription_targets
    Return canonical heater sample subscription target pairs.
custom_components/termoweb/inventory.py :: power_monitor_sample_subscription_targets
    Return canonical power monitor sample subscription target pairs.
custom_components/termoweb/inventory.py :: Node.__init__
    Initialise a node with normalised metadata.
custom_components/termoweb/inventory.py :: Node.name
    Return the friendly name for the node.
custom_components/termoweb/inventory.py :: Node.name
    Update the stored friendly name for the node.
custom_components/termoweb/inventory.py :: Node.as_dict
    Return a serialisable snapshot of core node metadata.
custom_components/termoweb/inventory.py :: HeaterNode.__init__
    Initialise a heater node.
custom_components/termoweb/inventory.py :: HeaterNode.supports_boost
    Return whether the node natively exposes boost/runback control.
custom_components/termoweb/inventory.py :: AccumulatorNode.supports_boost
    Return whether the accumulator exposes boost/runback.
custom_components/termoweb/inventory.py :: PowerMonitorNode.__init__
    Initialise a power monitor node.
custom_components/termoweb/inventory.py :: PowerMonitorNode.power_level
    Return the reported power level (stub).
custom_components/termoweb/inventory.py :: PowerMonitorNode.default_name
    Return the fallback friendly name for the power monitor.
custom_components/termoweb/inventory.py :: PowerMonitorNode.sample_target
    Return the canonical ``(node_type, addr)`` sample target.
custom_components/termoweb/inventory.py :: ThermostatNode.__init__
    Initialise a thermostat node.
custom_components/termoweb/inventory.py :: ThermostatNode.capabilities
    Return thermostat capabilities (stub).
custom_components/termoweb/inventory.py :: _existing_nodes_map
    Return a mapping of node type sections extracted from ``source``.
custom_components/termoweb/inventory.py :: _iter_snapshot_sections
    Yield node payloads derived from snapshot-style ``sections``.
custom_components/termoweb/inventory.py :: _iter_snapshot_section
    Yield node dictionaries for a single node type section.
custom_components/termoweb/inventory.py :: _collect_snapshot_addresses
    Return mapping of addresses to candidate payloads from ``section``.
custom_components/termoweb/inventory.py :: _extract_snapshot_name
    Return best candidate name extracted from ``payloads``.
custom_components/termoweb/inventory.py :: Inventory.iter_nodes_metadata
    Yield canonical node metadata for the requested types.
custom_components/termoweb/inventory.py :: Inventory.snapshot
    Return a serialisable snapshot of node metadata.
custom_components/termoweb/inventory.py :: InventorySnapshot.filtered_count
    Return the number of nodes included in the snapshot.
custom_components/termoweb/inventory.py :: _iter_node_payload
    Yield node dictionaries from a payload returned by the API.
custom_components/termoweb/inventory.py :: _resolve_node_class
    Return the most appropriate node class for ``node_type``.
custom_components/termoweb/inventory.py :: _normalise_with_fallback
    Return the first non-empty normalised value from ``candidates``.
custom_components/termoweb/inventory.py :: build_node_inventory
    Return a list of :class:`Node` instances for the provided payload.
custom_components/termoweb/number.py :: _restore_boost_value
    Restore a boost preference from cache, state, or settings.
custom_components/termoweb/number.py :: async_setup_entry
    Set up boost configuration number entities for accumulator nodes.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber.__init__
    Initialise the boost duration slider for an accumulator.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber.async_added_to_hass
    Restore the preferred duration once the entity is added.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber.async_set_native_value
    Handle slider updates from the user interface.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber.extra_state_attributes
    Expose the preferred minutes as an attribute.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber._initial_minutes_from_settings
    Return the bootstrap value sourced from cached settings.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber._apply_minutes
    Update the cached minutes and persist when requested.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber._validate_minutes
    Return a supported minute value, falling back to the default.
custom_components/termoweb/number.py :: AccumulatorBoostDurationNumber._hours_to_minutes
    Translate a slider value in hours into whole minutes.
custom_components/termoweb/number.py :: AccumulatorBoostTemperatureNumber.__init__
    Initialise the boost temperature slider for an accumulator.
custom_components/termoweb/number.py :: AccumulatorBoostTemperatureNumber.async_added_to_hass
    Restore the preferred temperature once the entity is added.
custom_components/termoweb/number.py :: AccumulatorBoostTemperatureNumber.async_set_native_value
    Handle slider updates that adjust the boost temperature.
custom_components/termoweb/number.py :: AccumulatorBoostTemperatureNumber.extra_state_attributes
    Expose the preferred temperature as an attribute.
custom_components/termoweb/number.py :: AccumulatorBoostTemperatureNumber._initial_temperature_from_settings
    Return the bootstrap value sourced from cached settings.
custom_components/termoweb/number.py :: AccumulatorBoostTemperatureNumber._apply_temperature
    Update the cached temperature and persist when requested.
custom_components/termoweb/number.py :: AccumulatorBoostTemperatureNumber._validate_temperature
    Return a valid boost temperature within supported limits.
custom_components/termoweb/sensor.py :: _looks_like_integer_string
    Return True if the string looks like an integer number.
custom_components/termoweb/sensor.py :: _instant_power_entry
    Return the instant power entry for ``(node_type, addr)`` when available.
custom_components/termoweb/sensor.py :: _normalise_energy_value
    Try to coerce a raw energy reading into kWh.
custom_components/termoweb/sensor.py :: async_setup_entry
    Set up sensors for each heater node.
custom_components/termoweb/sensor.py :: async_setup_entry.default_name
    Return a placeholder name for heater nodes.
custom_components/termoweb/sensor.py :: _power_monitor_display_name
    Return the display name for a power monitor address.
custom_components/termoweb/sensor.py :: HeaterTemperatureSensor.__init__
    Initialise the heater temperature sensor entity.
custom_components/termoweb/sensor.py :: HeaterTemperatureSensor.native_value
    Return the latest temperature reported by the heater.
custom_components/termoweb/sensor.py :: HeaterTemperatureSensor.extra_state_attributes
    Return metadata describing the heater temperature source.
custom_components/termoweb/sensor.py :: HeaterEnergyBase.__init__
    Initialise a heater energy-derived sensor entity.
custom_components/termoweb/sensor.py :: HeaterEnergyBase._device_available
    Return True when the heater has a device entry.
custom_components/termoweb/sensor.py :: HeaterEnergyBase._metric_section
    Return the dictionary with the requested metric values.
custom_components/termoweb/sensor.py :: HeaterEnergyBase._raw_native_value
    Return the raw metric value for this heater address.
custom_components/termoweb/sensor.py :: HeaterEnergyBase._coerce_native_value
    Convert the raw metric value into a float.
custom_components/termoweb/sensor.py :: HeaterEnergyBase.native_value
    Return the processed metric value for Home Assistant.
custom_components/termoweb/sensor.py :: HeaterEnergyBase.extra_state_attributes
    Return identifiers that locate the heater metric.
custom_components/termoweb/sensor.py :: HeaterEnergyTotalSensor._coerce_native_value
    Normalise the raw energy metric into kWh.
custom_components/termoweb/sensor.py :: HeaterInstantPowerSensor.__init__
    Initialise the heater instant power sensor entity.
custom_components/termoweb/sensor.py :: HeaterInstantPowerSensor._instant_entry
    Return the cached instant power entry for this heater.
custom_components/termoweb/sensor.py :: HeaterInstantPowerSensor.available
    Return True when the coordinator tracks instant power for this heater.
custom_components/termoweb/sensor.py :: HeaterInstantPowerSensor.native_value
    Return the instantaneous power draw in watts.
custom_components/termoweb/sensor.py :: HeaterInstantPowerSensor.extra_state_attributes
    Return metadata describing the instant power source.
custom_components/termoweb/sensor.py :: HeaterBoostMinutesRemainingSensor.native_value
    Return the remaining boost duration in minutes.
custom_components/termoweb/sensor.py :: HeaterBoostMinutesRemainingSensor.extra_state_attributes
    Return metadata about the boost session.
custom_components/termoweb/sensor.py :: HeaterBoostEndSensor.native_value
    Return the boost end timestamp.
custom_components/termoweb/sensor.py :: HeaterBoostEndSensor.state
    Return the Home Assistant state value for the boost end sensor.
custom_components/termoweb/sensor.py :: HeaterBoostEndSensor.extra_state_attributes
    Return metadata about the boost session.
custom_components/termoweb/sensor.py :: _create_heater_sensors
    Create the heater node sensors for the given node.
custom_components/termoweb/sensor.py :: _create_boost_sensors
    Create the boost-related sensors for a heater node.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase.__init__
    Initialise the power monitor sensor base entity.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase._device_record
    Return the cached coordinator data for this device.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase._metric_bucket
    Return the metric bucket for this power monitor.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase._tracked_addresses
    Return addresses tracked for this power monitor.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase._coerce_native_value
    Convert a metric payload value to ``float`` if possible.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase.should_poll
    Coordinator updates push new data for power monitors.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase.available
    Return True when the coordinator tracks this power monitor.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase.native_value
    Return the processed metric value for Home Assistant.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase.extra_state_attributes
    Return identifiers for the power monitor metric.
custom_components/termoweb/sensor.py :: PowerMonitorSensorBase.device_info
    Return the Home Assistant device metadata for the power monitor.
custom_components/termoweb/sensor.py :: PowerMonitorEnergySensor._coerce_native_value
    Normalise the raw energy metric into kWh.
custom_components/termoweb/sensor.py :: PowerMonitorInstantPowerSensor.__init__
    Initialise the instant power monitor sensor.
custom_components/termoweb/sensor.py :: PowerMonitorInstantPowerSensor.gateway_signal
    Return the dispatcher signal for gateway websocket data.
custom_components/termoweb/sensor.py :: PowerMonitorInstantPowerSensor._instant_entry
    Return the cached instant power entry for this monitor.
custom_components/termoweb/sensor.py :: PowerMonitorInstantPowerSensor.available
    Return True when the coordinator tracks this power monitor.
custom_components/termoweb/sensor.py :: PowerMonitorInstantPowerSensor.native_value
    Return the instantaneous power draw in watts.
custom_components/termoweb/sensor.py :: PowerMonitorInstantPowerSensor.extra_state_attributes
    Return metadata describing the instant power source.
custom_components/termoweb/sensor.py :: PowerMonitorInstantPowerSensor.device_info
    Return the Home Assistant device metadata for the power monitor.
custom_components/termoweb/sensor.py :: InstallationTotalEnergySensor.__init__
    Initialise the installation-wide energy sensor.
custom_components/termoweb/sensor.py :: InstallationTotalEnergySensor.gateway_signal
    Return the dispatcher signal for gateway websocket data.
custom_components/termoweb/sensor.py :: InstallationTotalEnergySensor.device_info
    Return the Home Assistant device metadata for the gateway.
custom_components/termoweb/sensor.py :: InstallationTotalEnergySensor._handle_gateway_dispatcher
    Handle websocket payloads that may update the totals.
custom_components/termoweb/sensor.py :: InstallationTotalEnergySensor.available
    Return True if the latest coordinator data contains totals.
custom_components/termoweb/sensor.py :: InstallationTotalEnergySensor.native_value
    Return the summed energy usage across all heaters.
custom_components/termoweb/sensor.py :: InstallationTotalEnergySensor.extra_state_attributes
    Return identifiers describing the aggregated energy value.
custom_components/termoweb/throttle.py :: MonotonicRateLimiter.async_throttle
    Sleep if required to honour ``min_interval`` seconds between calls.
custom_components/termoweb/throttle.py :: MonotonicRateLimiter.reset
    Reset the stored timestamp so the next call executes immediately.
custom_components/termoweb/throttle.py :: MonotonicRateLimiter.last_timestamp
    Return the timestamp of the most recent throttled call.
custom_components/termoweb/throttle.py :: MonotonicRateLimiter.set_last_timestamp
    Update the stored timestamp for the last throttled call.
custom_components/termoweb/throttle.py :: _new_samples_rate_limiter
    Return a freshly constructed rate limiter for heater samples.
custom_components/termoweb/throttle.py :: default_samples_rate_limit_state
    Return the shared rate limiter for heater samples requests.
custom_components/termoweb/throttle.py :: reset_samples_rate_limit_state
    Reset the shared samples rate limiter to its initial state.
custom_components/termoweb/utils.py :: async_get_integration
    Proxy ``homeassistant.loader.async_get_integration`` for monkeypatching.
custom_components/termoweb/utils.py :: async_get_integration_version
    Return the installed integration version string.
custom_components/termoweb/utils.py :: _entry_gateway_record
    Return the mapping storing integration data for ``entry_id``.
custom_components/termoweb/utils.py :: build_gateway_device_info
    Return canonical ``DeviceInfo`` for the TermoWeb gateway.
custom_components/termoweb/utils.py :: build_power_monitor_device_info
    Return canonical ``DeviceInfo`` for a TermoWeb power monitor.
custom_components/termoweb/utils.py :: float_or_none
    Return value as ``float`` if possible, else ``None``.
scripts/generate_function_map.py :: DocExtractor.__init__
    Initialise the extractor for ``file_path``.
scripts/generate_function_map.py :: DocExtractor.visit_ClassDef
    Visit a class and traverse into its body.
scripts/generate_function_map.py :: DocExtractor.visit_FunctionDef
    Visit a function definition and record its docstring.
scripts/generate_function_map.py :: DocExtractor.visit_AsyncFunctionDef
    Visit an async function definition and record its docstring.
scripts/generate_function_map.py :: DocExtractor.functions
    Return the collected functions.
scripts/generate_function_map.py :: iter_python_files
    Yield Python files under ``root`` excluding tests directories.
scripts/generate_function_map.py :: build_map
    Parse each Python file and collect function docstrings.
scripts/generate_function_map.py :: format_entries
    Format function docstrings into a human-readable map.
scripts/generate_function_map.py :: main
    CLI entry point.
scripts/prepare_release.py :: parse_args
    Return the release tag from the command line arguments.
scripts/prepare_release.py :: update_file_version
    Update the version string within *path* using *pattern*.
scripts/prepare_release.py :: run
    Execute a subprocess and ensure it completes successfully.
scripts/prepare_release.py :: main
    Parse arguments, update files, and perform release automation.
