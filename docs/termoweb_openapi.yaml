
## termoweb_openapi.yaml
```yaml
openapi: 3.0.3
info:
  title: TermoWeb Cloud API (Confirmed Endpoints)
  version: "1.0.0"
  description: |
    Confirmed REST endpoints and shapes (APK v2.5.1 + live tests).
servers:
  - url: https://control.termoweb.net

components:
  securitySchemes:
    basicClientAuth: { type: http, scheme: basic }
    bearerAuth: { type: http, scheme: bearer, bearerFormat: opaque }

  parameters:
    DevId:
      in: path
      name: dev_id
      required: true
      schema: { type: string }
    Addr:
      in: path
      name: addr
      required: true
      schema: { oneOf: [ {type: integer}, {type: string} ] }

  schemas:
    ErrorResponse:
      type: object
      additionalProperties: true
      properties:
        error:
          oneOf: [ {type: string}, {type: object} ]
    TokenResponse:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token: { type: string }
        token_type: { type: string, example: Bearer }
        expires_in: { type: integer, example: 604800 }
        scope: { type: string, example: "/user:W /devs/*:W" }
    Device:
      type: object
      required: [dev_id]
      additionalProperties: true
      properties:
        dev_id: { type: string }
        name: { type: string }
        fw_version: { type: string }
        serial_id: { type: string }
    DeviceListResponse:
      type: object
      properties:
        devs: { type: array, items: { $ref: '#/components/schemas/Device' } }
        invited_to: { type: array, items: { type: object } }

    ProgValue:
      type: integer
      enum: [0,1,2]

    HtrSettings:
      type: object
      additionalProperties: true
      properties:
        state: { type: string, enum: [on, off] }
        mode: { type: string, enum: [auto, manual, off] }
        stemp: { oneOf: [ {type: string}, {type: number} ], example: "24.2" }
        mtemp: { oneOf: [ {type: string}, {type: number} ], example: "23.8" }
        ptemp:
          type: array
          minItems: 3
          maxItems: 3
          items: { oneOf: [ {type: string}, {type: number} ] }
          example: ["10.0","22.0","23.0"]
        units: { type: string, enum: [C, F], example: C }
        prog:
          type: array
          minItems: 168
          maxItems: 168
          items: { $ref: '#/components/schemas/ProgValue' }
        priority: { type: integer }
        name: { type: string }

    HtrWrite:
      type: object
      additionalProperties: true
      properties:
        mode: { type: string, enum: [auto, manual, off] }
        # IMPORTANT: Server expects stemp as **string** when mode=manual.
        stemp: { type: string, pattern: "^[0-9]+(\\.[0-9])?$", example: "16.0" }
        units: { type: string, enum: [C, F], example: C }

paths:
  /client/token:
    post:
      security: [ { basicClientAuth: [] } ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [username, password, grant_type]
              properties:
                username: { type: string, format: email }
                password: { type: string }
                grant_type: { type: string, enum: [password], default: password }
      responses:
        '200': { description: Token, content: { application/json: { schema: { $ref: '#/components/schemas/TokenResponse' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Invalid client, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/v2/devs/:
    get:
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Devices
          content: { application/json: { schema: { $ref: '#/components/schemas/DeviceListResponse' } } }

  /api/v2/devs/{dev_id}/mgr/nodes:
    get:
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/DevId' } ]
      responses:
        '200':
          description: Nodes
          content: { application/json: { schema: { type: object, additionalProperties: true } } }

  /api/v2/devs/{dev_id}/htr/{addr}/settings:
    get:
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/DevId' }, { $ref: '#/components/parameters/Addr' } ]
      responses:
        '200': { description: Heater settings, content: { application/json: { schema: { $ref: '#/components/schemas/HtrSettings' } } } }
    post:
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/DevId' }, { $ref: '#/components/parameters/Addr' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HtrWrite' }
            examples:
              manual_setpoint:
                summary: Manual + setpoint
                value: { mode: manual, stemp: "16.0", units: C }
              auto_mode:
                summary: Program (auto)
                value: { mode: auto, units: C }
              off_mode:
                summary: Off
                value: { mode: off, units: C }
      responses:
        '201': { description: Accepted }
        '400': { description: Bad request (e.g., stemp sent as number), content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/v2/devs/{dev_id}/htr/{addr}/advanced_setup:
    get:
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/DevId' }, { $ref: '#/components/parameters/Addr' } ]
      responses:
        '200': { description: Advanced setup, content: { application/json: { schema: { type: object, additionalProperties: true } } } }
