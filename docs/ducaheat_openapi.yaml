openapi: 3.0.3
info:
  title: Ducaheat Cloud API (Tevolve v2) — Unofficial (updated)
  version: "0.2.2"
  description: |
    This spec preserves correct details from the existing document and
    adds what was directly observed in the attached protocol dump.
    It focuses on segmented writes, the selection gate, and Socket.IO
    usage. Items not present in the dump are retained with notes.

servers:
  - url: https://api-tevolve.termoweb.net
    description: Production (Ducaheat)

tags:
  - name: Auth
  - name: Nodes
  - name: ThermalNodes
  - name: PowerMonitors
  - name: Samples

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    basicAuth:
      type: http
      scheme: basic

  schemas:
    TokenResponse:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token: {type: string}
        token_type: {type: string, example: Bearer}
        expires_in: {type: integer, example: 3600}
        refresh_token: {type: string, nullable: true}

    HeaterStatusWrite:
      type: object
      description: >
        Live status updates. In the capture, the app also uses this
        to write preset temperatures (`ice_temp`, `eco_temp`, `comf_temp`).
      additionalProperties: false
      properties:
        mode: {type: string, example: manual}
        stemp: {type: string, example: "22.0", description: String with one decimal}
        units: {type: string, enum: [C, F], example: C}
        ice_temp: {type: string, example: "5.0"}
        eco_temp: {type: string, example: "17.5"}
        comf_temp: {type: string, example: "21.0"}

    HeaterModeWrite:
      type: object
      additionalProperties: false
      properties:
        mode: {type: string, example: auto}

    HeaterProgWrite:
      type: object
      description: >
        Weekly program object. In this capture the heater program uses
        24 integers per day (hourly slots). Some models/firmware may differ.
      additionalProperties: true

    HeaterProgTempsWrite:
      type: object
      description: >
        Named program temperatures (not observed in this dump; retained for compatibility).
      additionalProperties: false
      properties:
        comfort: {type: string, example: "21.0"}
        eco: {type: string, example: "18.0"}
        antifrost: {type: string, example: "7.0"}

    HeaterSetupWrite:
      type: object
      additionalProperties: true
      properties:
        extra_options:
          type: object
          additionalProperties: true
          properties:
            boost_time: {type: integer, minimum: 1, example: 60}
            boost_temp: {type: string, example: "22.0"}

    HeaterLockWrite:
      type: object
      additionalProperties: false
      properties:
        lock: {type: boolean}

    SelectWrite:
      type: object
      required: [select]
      additionalProperties: false
      properties:
        select: {type: boolean}

    HeaterBoostWrite:
      type: object
      description: >
        Boost control (observed for accumulators in prior docs; not present in this dump).
      required: [boost]
      additionalProperties: false
      properties:
        boost: {type: boolean}
        boost_time: {type: integer, minimum: 60, maximum: 600, description: Minutes (1–10 h). Required when boost=true.}
        stemp: {type: string, pattern: '^[0-9]+\.[0-9]$', description: Required when boost=true.}
        units: {type: string, enum: [C, F], description: Required when boost=true.}

paths:
  /client/token:
    post:
      tags: [Auth]
      summary: Obtain access token (password grant)
      security: [{ basicAuth: [] }]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [grant_type, username, password]
              properties:
                grant_type: {type: string, example: password}
                username: {type: string}
                password: {type: string}
      responses:
        "200":
          description: Access token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TokenResponse' }

  /api/v2/devs/{dev_id}/mgr/nodes:
    get:
      tags: [Nodes]
      summary: Node inventory (observed in dump)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }

  /api/v2/devs/{dev_id}/mgr/rtc/time:
    get:
      tags: [Nodes]
      summary: Gateway RTC (observed in dump)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }

  /api/v2/devs/{dev_id}/{type}/{addr}:
    get:
      tags: [ThermalNodes]
      summary: Read thermal node (consolidated)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK }

  /api/v2/devs/{dev_id}/{type}/{addr}/status:
    post:
      tags: [ThermalNodes]
      summary: Update live status (mode, setpoint, units, presets)
      description: Acquire selection first via /select.
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HeaterStatusWrite' }
      responses:
        "201": { description: Accepted }

  /api/v2/devs/{dev_id}/{type}/{addr}/mode:
    post:
      tags: [ThermalNodes]
      summary: Set operating mode
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HeaterModeWrite' }
      responses:
        "201": { description: Accepted }

  /api/v2/devs/{dev_id}/{type}/{addr}/prog:
    post:
      tags: [ThermalNodes]
      summary: Set weekly program (full object)
      description: >
        This capture shows 24 integers per day for the heater schedule.
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HeaterProgWrite' }
      responses:
        "201": { description: Accepted }

  /api/v2/devs/{dev_id}/{type}/{addr}/prog_temps:
    post:
      tags: [ThermalNodes]
      summary: Set program temperatures (not observed in this dump)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HeaterProgTempsWrite' }
      responses:
        "201": { description: Accepted }

  /api/v2/devs/{dev_id}/{type}/{addr}/setup:
    post:
      tags: [ThermalNodes]
      summary: Update advanced defaults
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HeaterSetupWrite' }
      responses:
        "201": { description: Accepted }

  /api/v2/devs/{dev_id}/{type}/{addr}/lock:
    post:
      tags: [ThermalNodes]
      summary: Toggle child lock
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/HeaterLockWrite' }
      responses:
        "201": { description: Accepted }

  /api/v2/devs/{dev_id}/{type}/{addr}/select:
    post:
      tags: [ThermalNodes]
      summary: Claim or release selection (REQUIRED around writes)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SelectWrite' }
      responses:
        "201": { description: Accepted }

  /api/v2/devs/{dev_id}/{type}/{addr}/samples:
    get:
      tags: [Samples]
      summary: Read thermal node samples
      description: >
        Not observed for htr/acm in this dump. Prior docs describe epoch
        milliseconds for thermal nodes.
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: type
          in: path
          required: true
          schema: { type: string, enum: [htr, acm] }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
        - name: start
          in: query
          required: true
          schema: { type: integer, format: int64 }
        - name: end
          in: query
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: OK }

  /api/v2/devs/{dev_id}/pmo/{addr}/samples:
    get:
      tags: [PowerMonitors]
      summary: Read power monitor samples (epoch seconds observed)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
        - name: start
          in: query
          required: true
          schema: { type: integer, format: int64 }
        - name: end
          in: query
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: OK }
        "204": { description: No samples }

  /api/v2/devs/{dev_id}/pmo/{addr}/power:
    get:
      tags: [PowerMonitors]
      summary: Instantaneous power (observed in dump)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK }

x-socketio:
  endpoint: "/socket.io"
  namespace: "/api/v2/socket_io"
  eio: "3"
  notes: |
    The app performs: polling open → namespace join (polling) → drain →
    websocket upgrade → 2probe/3probe/5 → namespace ack → send ["dev_data"]
    and subscribe to per-node channels. Reply to Engine.IO and Socket.IO pings
    and to vendor "ping" messages with "pong".
