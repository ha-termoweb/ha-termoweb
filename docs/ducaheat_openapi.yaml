openapi: 3.0.3
info:
  title: Ducaheat Cloud API (Tevolve v2) â€” Unofficial
  version: "0.1.0"
  description: |
    Unofficial OpenAPI description for the Ducaheat (Ducasa) mobile app backend.
    This reflects endpoints discovered in the v1.40.1 APK decompile and
    verified patterns that differ from the consolidated TermoWeb API.

    Key differences vs TermoWeb:
      - No consolidated `/settings` resource for heaters.
      - Writes are segmented: `/status`, `/mode`, `/prog`, `/prog_temps`, `/setup`, `/lock`, `/select`.
      - Socket path differs: `/socket.io?token=...&dev_id=...`.

    Base host: https://api-tevolve.termoweb.net
servers:
  - url: https://api-tevolve.termoweb.net
    description: Production (Ducaheat)
tags:
  - name: Auth
  - name: Devices
  - name: ThermalNodes
  - name: PowerMonitors
  - name: Samples
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    basicAuth:
      type: http
      scheme: basic
  schemas:
    TokenResponse:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          example: 3600
        refresh_token:
          type: string
          nullable: true
    GeoData:
      type: object
      description: Coarse location metadata reported by the gateway snapshot
      properties:
        country:
          type: string
        state:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        zip:
          type: string
          nullable: true
        tz_code:
          type: string
        coarsePosition:
          type: object
          description: Approximate coordinates when available
          properties:
            longitude:
              type: number
              format: float
            latitude:
              type: number
              format: float
          additionalProperties: false
      additionalProperties: false
    AwayStatus:
      type: object
      properties:
        enabled:
          type: boolean
        away:
          type: boolean
        forced:
          type: boolean
      additionalProperties: false
    ChargingSlot:
      type: object
      properties:
        start:
          type: integer
          description: Minute offset from start of day
        end:
          type: integer
          description: Minute offset from start of day
      additionalProperties: false
    ThermalNode:
      type: object
      description: Consolidated state returned by GET /devs/{dev_id}/{node_type}/{addr} (heater or accumulator)
      additionalProperties: true
      properties:
        dev_id:
          type: string
        node_type:
          type: string
          example: acm
        addr:
          type: integer
        status:
          type: object
          additionalProperties: true
          properties:
            mode:
              type: string
              description: Current mode (as reported by device)
              example: manual
            stemp:
              type: string
              description: Current set temperature as a string with one decimal
              example: "22.0"
            units:
              type: string
              enum: [C, F]
              example: C
            boost_active:
              type: boolean
              description: Accumulator boost session currently active
        setup:
          type: object
          additionalProperties: true
          properties:
            extra_options:
              type: object
              additionalProperties: true
              properties:
                boost_time:
                  type: integer
                  description: Default boost/runback time (minutes)
                  example: 60
                boost_temp:
                  type: string
                  description: Temperature applied during accumulator boost, if distinct from `stemp`
                  example: "22.0"
            operational_mode:
              type: integer
            control_mode:
              type: integer
            units:
              type: string
              enum: [C, F]
            offset:
              type: string
            priority:
              type: string
            away_offset:
              type: string
            window_mode_enabled:
              type: boolean
            true_radiant_enabled:
              type: boolean
            resistor_mode:
              type: integer
            prog_resolution:
              type: integer
            frost_protect:
              type: boolean
            charging_conf:
              type: object
              properties:
                slot_1:
                  $ref: '#/components/schemas/ChargingSlot'
                slot_2:
                  $ref: '#/components/schemas/ChargingSlot'
                active_days:
                  type: array
                  description: Seven booleans indicating which days the charging slots apply
                  minItems: 7
                  maxItems: 7
                  items:
                    type: integer
              additionalProperties: false
            min_stemp:
              type: string
            max_stemp:
              type: string
            factory_options:
              type: object
              properties:
                resistor_available:
                  type: boolean
                ventilation_available:
                  type: boolean
                ventilation_type:
                  type: integer
        prog:
          type: object
          description: Weekly program structure (exact shape model-dependent; see markdown)
          additionalProperties: true
        prog_temps:
          type: object
          description: Named temperatures for program modes
          properties:
            comfort:
              type: string
              example: "21.0"
            eco:
              type: string
              example: "18.0"
            antifrost:
              type: string
              example: "7.0"
        version:
          type: object
          properties:
            hw_version:
              type: string
            fw_version:
              type: string
            uid:
              type: string
            pid:
              type: string
          additionalProperties: false
    HeaterStatusWrite:
      type: object
      description: Write status for a heater or accumulator
      properties:
        mode:
          type: string
          description: Target mode (exact enum is model-dependent; examples below)
          example: manual
        stemp:
          type: string
          description: Target set temperature (string with one decimal)
          example: "22.0"
        units:
          type: string
          enum: [C, F]
          example: C
        boost:
          type: boolean
          description: Start/stop an immediate Boost (runback) session (accumulators only)
      additionalProperties: false
    HeaterModeWrite:
      type: object
      properties:
        mode:
          type: string
          example: manual
      additionalProperties: false
    HeaterProgWrite:
      type: object
      description: Weekly program payload. Exact structure varies; app sends a structured object per day/slot.
      additionalProperties: true
    HeaterProgTempsWrite:
      type: object
      properties:
        comfort:
          type: string
          example: "21.0"
        eco:
          type: string
          example: "18.0"
        antifrost:
          type: string
          example: "7.0"
      additionalProperties: false
    HeaterSetupWrite:
      type: object
      properties:
        extra_options:
          type: object
          properties:
            boost_time:
              type: integer
              minimum: 1
              example: 60
            boost_temp:
              type: string
              example: "22.0"
          additionalProperties: true
      additionalProperties: true
    HeaterLockWrite:
      type: object
      properties:
        lock:
          type: boolean
          description: Enable/disable local controls (child lock)
      additionalProperties: false
    HeaterSelectWrite:
      type: object
      properties:
        select:
          type: boolean
          description: Select this node for subsequent operations
      additionalProperties: false
    PowerMonitorNode:
      type: object
      description: Power monitor node state returned by GET /devs/{dev_id}/pmo/{addr}
      properties:
        name:
          type: string
        addr:
          type: integer
        type:
          type: string
          example: pmo
        installed:
          type: boolean
        lost:
          type: boolean
        uid:
          type: string
        level:
          type: integer
        parent:
          type: integer
        power_limit:
          type: object
          properties:
            power_limit:
              type: string
        setup:
          type: object
          properties:
            power_limit:
              type: integer
            reverse:
              type: boolean
            circuit_type:
              type: integer
        version:
          type: object
          properties:
            hw_version:
              type: string
            fw_version:
              type: string
            uid:
              type: string
            pid:
              type: string
      additionalProperties: true
    GatewaySnapshot:
      type: object
      description: Payload emitted by the dev_data Socket.IO event
      properties:
        geoData:
          $ref: '#/components/schemas/GeoData'
        geo_data:
          $ref: '#/components/schemas/GeoData'
        away_status:
          $ref: '#/components/schemas/AwayStatus'
        nodes:
          type: array
          items:
            type: object
            description: Node objects (heater, accumulator, power monitor, etc.)
            additionalProperties: true
        htr_system:
          type: object
          additionalProperties: true
        pmo_system:
          type: object
          additionalProperties: true
        discovery:
          type: object
          additionalProperties: true
        connected:
          type: boolean
      additionalProperties: true
    EmptyResponse:
      type: object
      description: Empty JSON object on success
paths:
  /client/token:
    post:
      tags: [Auth]
      summary: Obtain OAuth2 access token (password grant)
      description: >
        Use HTTP Basic with the app client (`5c49dce977510351506c42db:tevolve`).
        POST form fields: `grant_type=password&username=<email>&password=<password>`.
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [grant_type, username, password]
              properties:
                grant_type:
                  type: string
                  example: password
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}:
    get:
      tags: [ThermalNodes]
      summary: Read heater or accumulator node (consolidated state)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Node state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThermalNode'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/status:
    post:
      tags: [ThermalNodes]
      summary: Set mode/setpoint/units; accumulators may also trigger Boost
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
            description: Use `acm` when sending boost-related writes
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeaterStatusWrite'
            examples:
              manual_22C:
                value:
                  mode: manual
                  stemp: "22.0"
                  units: C
              boost_now:
                value:
                  boost: true
                summary: Valid only when node_type is acm
      responses:
        "201":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/mode:
    post:
      tags: [ThermalNodes]
      summary: Set mode only
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeaterModeWrite'
      responses:
        "201":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/prog:
    post:
      tags: [ThermalNodes]
      summary: Set weekly program
      description: >
        Sends the full weekly program. Exact payload structure is device/model-specific
        as produced by the Ducaheat app.
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeaterProgWrite'
      responses:
        "201":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/prog_temps:
    post:
      tags: [ThermalNodes]
      summary: Set program temperatures (comfort/eco/antifrost)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeaterProgTempsWrite'
            example:
              comfort: "21.0"
              eco: "18.0"
              antifrost: "7.0"
      responses:
        "201":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/setup:
    post:
      tags: [ThermalNodes]
      summary: Set advanced/extra options (incl. default Boost time/temp)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeaterSetupWrite'
            example:
              extra_options:
                boost_time: 60
                boost_temp: "22.0"
      responses:
        "201":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/lock:
    post:
      tags: [ThermalNodes]
      summary: Toggle child lock / local control lock
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeaterLockWrite'
            examples:
              enable:
                value: { lock: true }
              disable:
                value: { lock: false }
      responses:
        "201":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/select:
    post:
      tags: [ThermalNodes]
      summary: Select/deselect this node for subsequent writes
      description: Some operations may require the node to be selected by the current user.
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeaterSelectWrite'
            examples:
              select:
                value: { select: true }
              deselect:
                value: { select: false }
      responses:
        "201":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /api/v2/devs/{dev_id}/{node_type}/{addr}/samples:
    get:
      tags: [Samples]
      summary: Read samples (telemetry/history)
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: node_type
          in: path
          required: true
          schema:
            type: string
            enum: [htr, acm]
        - name: addr
          in: path
          required: true
          schema: { type: integer }
        - name: start
          in: query
          required: true
          schema:
            type: integer
            format: int64
            description: Epoch milliseconds (inclusive)
          example: 1704067200000
        - name: end
          in: query
          required: true
          schema:
            type: integer
            format: int64
            description: Epoch milliseconds (exclusive)
          example: 1704153600000
      responses:
        "200":
          description: Samples payload
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v2/devs/{dev_id}/pmo/{addr}:
    get:
      tags: [PowerMonitors]
      summary: Read power monitor node
      parameters:
        - name: dev_id
          in: path
          required: true
          schema: { type: string }
        - name: addr
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Power monitor node state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerMonitorNode'
